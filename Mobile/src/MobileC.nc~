#include "Msg.h"
#include "Timer.h"
#define NEW_PRINTF_SEMANTICS
#include "printf.h"
#include "math.h"

module MobileC {
 
	uses {
		interface SplitControl as RadioControl;
		interface Boot;
		interface AMPacket;
		interface AMSend;
		interface Packet;
		interface Receive;
		interface Timer<TMilli> as Timer1;
		interface Timer<TMilli> as Timer2;
		interface Random;
	}
}


implementation {
	
	typedef struct rssiArrayElement {
		int nodeId;
		int16_t rssiVal;
	} nodeValue;

	nodeValue RSSIArray[8];
	nodeValue RSSISaved[8];

	nodeValue topNode[3];

	float distArray[3];

	float posX, posY;
	float X = 0,Y = 0;

	float errorDist[24];

	float variance[NUMCOORD];

	int time = 0;
	int cycle = 0;
	
	message_t packet;
	
	int16_t calcRSSI(float x, float y);
	
	void calcDist();
	void findTopNode();
	void initNodeArray(nodeValue *array);
	void initTopArray(nodeValue *array);
	void initDistArray();
	void initErrorDistanceArray();
	float distFromRSSI(int16_t RSSI);
	void getPosition();
	void getError();
	void printfFloat(float toBePrinted);
	float getGaussian();
	float rand_gauss();
	void fillVarianceArray();
	void sendSwitchOff();
 

	event void Boot.booted() {
		printf("Mobile Node booted.\n");
		initNodeArray(RSSIArray);
		initNodeArray(RSSISaved);
		initNodeArray(topNode);
		initDistArray();
		initErrorDistanceArray();
		fillVarianceArray();
		call RadioControl.start();
	}

	event void RadioControl.startDone(error_t err){}
	event void RadioControl.stopDone(error_t err){}

	event void AMSend.sendDone(message_t* buf,error_t err) {}

	event void Timer1.fired(){
		call Timer1.startOneShot(SEND_INTERVAL_ANCHOR);
	}
	
	event void Timer2.fired() {
		int j=0;
		
		if(time == NUMCOORD) {
			sendSwitchOff();
			call Timer1.stop();			
			return;
		}
	
		for(j=0;j<8;j++) {
			RSSISaved[j] = RSSIArray[j];
		}
		
		printf("Node current position (");
		printfFloat(mobileCoord[time].x);
		printf(",");
		printfFloat(mobileCoord[time].y);
		printf(")\n");
	
		findTopNode();
		calcDist();
		getPosition();

		X += posX; Y += posY;
		if(cycle %  4 == 3 && cycle != 0) {
			posX = X / 4.0;
			posY = Y / 4.0;
			getError();
		}

		initNodeArray(RSSISaved);
		initTopArray(topNode);
		initDistArray();
		initErrorDistanceArray();
		cycle++;
		if(cycle %  4 == 0) {
			X = 0; Y = 0;
			time++;	
		}
	}

  void sendSwitchOff() {
	nodeMessage_t* mess = (nodeMessage_t*) (call Packet.getPayload(&packet,sizeof(nodeMessage_t)));
	mess->msg_type = SWITCHOFF;
	 
	printf("Sending switchoff beacon\n");
	call AMSend.send(AM_BROADCAST_ADDR,&packet,sizeof(nodeMessage_t));
	call RadioControl.stop();
  }
 
	event message_t* Receive.receive(message_t* buf,void* payload, uint8_t len) {
		am_addr_t sourceNodeId = call AMPacket.source(buf);	
		nodeMessage_t* mess = (nodeMessage_t*) payload;
		printf("Beacon received from anchor %d\n", sourceNodeId);
	
		if ( mess->msg_type == BEACON ) {
			printf("RSSI Before: %d from %d\n",RSSIArray[sourceNodeId-1].rssiVal,sourceNodeId);
			RSSIArray[sourceNodeId-1].rssiVal = calcRSSI(mess->x,mess->y);
			RSSIArray[sourceNodeId-1].nodeId = sourceNodeId;
			printf("RSSI Calculated: %d from %d\n",RSSIArray[sourceNodeId-1].rssiVal,sourceNodeId);

			if(!(call Timer2.isRunning())) {
				call Timer2.startOneShot(RECEIVE_INTERVAL_ANCHOR);
			}		
		}
		else if(mess->msg_type == SYNCPACKET) {
			call Timer1.startOneShot(SEND_INTERVAL_ANCHOR);
		}
		return buf;
	}
 
	void initNodeArray(nodeValue *array) {
		int i;
		for(i=0;i<8;i++) {
			array[i].nodeId = -999;
			array[i].rssiVal = -999;
		}
	}
	
	void initTopArray(nodeValue *array) {
		int i;
		for(i=0;i<3;i++) {
			array[i].nodeId = -999;
			array[i].rssiVal = -999;
		}
	}

 
	void initDistArray() {
		int i;
		for(i=0;i<3;i++) {
			distArray[i] = -999;
		}
	}
	
	void initErrorDistanceArray() {
		int i;
		for(i=0;i<24;i++) {
			errorDist[i] = -999;
		}
	}
	
	void findTopNode(){
		int j;
		for(j=0;j<8;j++) {
			printf("Node = %d, RSSI = %d\n", RSSISaved[j].nodeId, RSSISaved[j].rssiVal);
		}
	
		for(j=0; j<8; ++j) {
			if(RSSISaved[j].rssiVal>topNode[0].rssiVal) {
				topNode[0] = RSSISaved[j];
			}
		}
		RSSISaved[topNode[0].nodeId-1].rssiVal = -999;
		for(j=0; j<8; ++j) {
			if(RSSISaved[j].rssiVal>topNode[1].rssiVal ) {
				topNode[1] = RSSISaved[j];
			}
		}
		RSSISaved[topNode[1].nodeId-1].rssiVal = -999;
		for(j=0; j<8 ; ++j) {
			if(RSSISaved[j].rssiVal>topNode[2].rssiVal) {
				topNode[2] = RSSISaved[j];
			}
		}
	
		printf("Selected nodeID = %d with RSSI = %d\n",topNode[0].nodeId,topNode[0].rssiVal);
		printf("Selected nodeID = %d with RSSI = %d\n",topNode[1].nodeId,topNode[1].rssiVal);
		printf("Selected nodeID = %d with RSSI = %d\n",topNode[2].nodeId,topNode[2].rssiVal);
	}
	
	int16_t calcRSSI(float x, float y) {
		int16_t rssi;
		float distance;
		distance = sqrtf(powf(x-mobileCoord[time].x,2)+powf(y-mobileCoord[time].y,2));
		rssi = -60 - 10 * log10f(distance)+getGaussian();
		return rssi;
	}

	float getGaussian() {
		float var = variance[time]; 
		float gauss;
		float randGauss = rand_gauss();
		printf("Gaussian random value: ");
		printfFloat(randGauss);

		gauss = ( randGauss * var ) + 0;
		printf("\nGaussian value: ");
		printfFloat(gauss);
		printf("\n");
		return gauss;
	}
	
	void calcDist() {
		int i;

		for(i=0;i<3;i++) {
			if(topNode[i].nodeId!=-999 && topNode[i].rssiVal!=-999) {
				distArray[i] = distFromRSSI(topNode[i].rssiVal);   
			}
		}
	
		for(i=0;i<3;i++) {
			if(distArray[i]!=-999) {
				printf("\nPosition %d, distance = ", i+1);
				printfFloat(distArray[i]);
			}
		}
		printf("\n");	
	}

	float distFromRSSI(int16_t RSSI) {
		float res, p;
		float rssi = RSSI;
	
		p = (-60-rssi)/10;
		res = powf(10, p);
		return res;
	}
 
	void getPosition() {
		int i,j=0;
		float sqrtValue, partOne, sumX=0, sumY=0, sumFunct=0;
		float alpha = 0.8;
		float functToMin=9998, functToMinPrev=9999;
		float contX=0, contY=0;
	

		for(i=0;i<3;i++) {
			if(topNode[i].nodeId!=-999 && topNode[i].rssiVal!=-999) {
				posX = posX + anchorCoord[topNode[i].nodeId-1].x;
				contX++;
				posY = posY + anchorCoord[topNode[i].nodeId-1].y;
				contY++;
			}
		}
	
		if(contX>=2 && contY >=2) {
			posX = posX / contX;
			posY = posY / contY;
		} else {
			posX = anchorCoord[topNode[0].nodeId-1].x + 5;
			posY = anchorCoord[topNode[0].nodeId-1].y + 5;
		}
	
	
		printf("Initial calculated position (");
		printfFloat(posX);
		printf(",");
		printfFloat(posY);
		printf(")");
	
		while(functToMin < functToMinPrev ) {
			j++;
			sumFunct = 0;
			sumX = 0;
			sumY = 0;
	 
			if(j>3 && j<=10) {
				alpha = 0.6;
			} else {
				if(j>10 && j<=20) {
					alpha = 0.5;
				} else {
					alpha = 0.1;
				}	
			}

			for(i=0;i<3;++i) {
				if(topNode[i].nodeId!=-999 || topNode[i].rssiVal!=-999 || distArray[i]!=-999) {
					sqrtValue = sqrtf(powf(posX-anchorCoord[topNode[i].nodeId-1].x,2) 
							+ powf(posY-anchorCoord[topNode[i].nodeId-1].y,2));
					partOne = 1 - (distArray[i]/sqrtValue);
					sumX = sumX + (partOne * (posX - anchorCoord[topNode[i].nodeId-1].x));
					sumY = sumY + (partOne * (posY - anchorCoord[topNode[i].nodeId-1].y));
	
					sumFunct = sumFunct + powf((sqrtValue - distArray[i]),2);
				}
			}

			posX = posX - (alpha * sumX);
			posY = posY - (alpha * sumY);
	
			functToMinPrev = functToMin;
	
			functToMin = (0.5) * sumFunct;
		}
	
		printf(")\n");
		printf("Estimated position (");
		printfFloat(posX);
		printf(" , ");
		printfFloat(posY);
		printf(")\n");
	}
 
	void getError() {
		errorDist[time] = sqrtf(powf(mobileCoord[time].x - posX,2) 
				+ powf(mobileCoord[time].y - posY,2));
		
		
		printf("ERROR - Estimated position (");
		printfFloat(posX);
		printf(",");
		printfFloat(posY);
		printf(")\n");
		
		printf("ERROR - Actual position (");
		printfFloat(mobileCoord[time].x);
		printf(",");
		printfFloat(mobileCoord[time].y);
		printf(")\n");
		
		printf("ERROR - Error: ");
		printfFloat(errorDist[time]);
		printf(" at time: %d, with variance: ", time);
		printfFloat(variance[time]);
		printf("\n");
	}

	void printfFloat(float toBePrinted) {
		uint32_t fi, f0, f1, f2, f3, f4, f5;
		char c;
		float f = toBePrinted;

		if (f<0){
			c = '-'; f = -f;
		} else {
			c = ' ';
		}

		fi = (uint32_t) f;

		f = f - ((float) fi);
		f0 = f*10;   	f0 %= 10;
		f1 = f*100;  	f1 %= 10;
		f2 = f*1000; 	f2 %= 10;
		f3 = f*10000; 	f3 %= 10;
		f4 = f*100000; 	f4 %= 10;
		f5 = f*1000000; f5 %= 10;
		printf("%c%ld.%d%d%d%d%d%d", c, fi, (uint8_t) f0, (uint8_t) f1, (uint8_t) f2, (uint8_t) f3, (uint8_t) f4, (uint8_t) f5);
	}
	
	float rand_gauss (void) {
		static float V1, V2, S;
		static int phase = 0;
		float Xg;

		if(phase == 0) {
			do {
				float U1 = (float)(call Random.rand16()) / 30000;
				float U2 = (float)(call Random.rand16()) / 30000;

				V1 = 2 * U1 - 1;
				V2 = 2 * U2 - 1;
				S = V1 * V1 + V2 * V2;
			} while(S >= 1 || S == 0);

			Xg = V1 * sqrtf(-2 * log10f(S) / S);
		} else
			Xg = V2 * sqrtf(-2 * log10f(S) / S);

		phase = 1 - phase;

		return Xg;
	}
	

	void fillVarianceArray() {
		int i;
		for (i=1; i <= NUMCOORD; i++) {
			variance[i-1] = i/(NUMCOORD/4.0);
		}
	}		
}
